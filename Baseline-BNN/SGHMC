{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1yWu9OA-sRQ5NGpQq03kABcffQW9mo_x3","authorship_tag":"ABX9TyOpF6qbMh2ddNaVRfH9N07C"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9Ghvs9n0f0Ik","executionInfo":{"status":"ok","timestamp":1695699688377,"user_tz":420,"elapsed":3,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}},"outputId":"1eb18af1-6462-45ff-8ec4-4984b2ba09f3"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/Bayesian-Neural-Networks-master\n"]}],"source":["%cd /content/drive/MyDrive/Bayesian-Neural-Networks-master"]},{"cell_type":"code","source":["from __future__ import division, print_function\n","import time\n","import torch.utils.data\n","from torchvision import transforms, datasets\n","import argparse\n","import matplotlib\n","from src.Stochastic_Gradient_HMC_SA.model import BNN_cat\n","from src.utils import *\n","from torch.utils.data import Dataset, DataLoader\n","from sklearn.model_selection import train_test_split\n","\n","matplotlib.use('Agg')\n","import matplotlib.pyplot as plt"],"metadata":{"id":"2kV71ACDhfCE","executionInfo":{"status":"ok","timestamp":1695699693712,"user_tz":420,"elapsed":5337,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["parser = argparse.ArgumentParser(description='Train Bayesian Neural Net on MNIST with Scale-adapted Stochastic Gradient HMC')\n","parser.add_argument('--epochs', type=int, nargs='?', action='store', default=100,\n","                    help='How many epochs to train. Default: 20.')\n","parser.add_argument('--sample_freq', type=int, nargs='?', action='store', default=2,\n","                    help='How many epochs pass between saving samples. Default: 2.')\n","parser.add_argument('--burn_in', type=int, nargs='?', action='store', default=1,\n","                    help='How many epochs to burn in for?. Default: 20.')\n","parser.add_argument('--lr', type=float, nargs='?', action='store', default=1e-2,\n","                    help='learning rate. I recommend 1e-2. Default: 1e-2.')\n","parser.add_argument('--models_dir', type=str, nargs='?', action='store', default='SGHMC_models',\n","                    help='Where to save learnt weights and train vectors. Default: \\'SGHMC_models\\'.')\n","parser.add_argument('--results_dir', type=str, nargs='?', action='store', default='SGHMC_results',\n","                    help='Where to save learnt training plots. Default: \\'SGHMC_results\\'.')\n","args = parser.parse_args(args=[])"],"metadata":{"id":"9DMsZ6Tuhg_E","executionInfo":{"status":"ok","timestamp":1695699693712,"user_tz":420,"elapsed":5,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["# Where to save models weights\n","models_dir = args.models_dir\n","# Where to save plots and error, accuracy vectors\n","results_dir = args.results_dir\n","\n","mkdir(models_dir)\n","mkdir(results_dir)\n","# ------------------------------------------------------------------------------------------------------\n","# train config\n","NTrainPoints = 800\n","batch_size = 32\n","nb_epochs = args.epochs\n","log_interval = 1\n","nb_its_dev = log_interval\n","flat_ims=True\n","# ------------------------------------------------------------------------------------------------------\n","# dataset\n","cprint('c', '\\nData:')\n","\n","# load data\n","\n","class CustomNNDataset(Dataset):\n","    def __init__(self, x, y):\n","        self.x = x\n","        self.y = y\n","\n","    def __len__(self):\n","        return len(self.x)\n","\n","    def __getitem__(self, idx):\n","        x = self.x[idx]\n","        y = self.y[idx]\n","        return x, y\n","\n","with open(os.path.join('nn.pickle'), 'rb') as f:\n","  [pr_cov,x,true_input,y] = pickle.load(f)\n","\n","use_cuda = torch.cuda.is_available()\n","\n","\n","x = torch.from_numpy(x).type(torch.float)\n","y = torch.from_numpy(y).type(torch.int).reshape(y.shape[0],)\n","\n","# split the data into training and validation sets\n","x_train, x_val, y_train, y_val = train_test_split(x, y, test_size=0.2, random_state=42)\n","\n","# define the train and validation sets\n","train_dataset = CustomNNDataset(x_train, y_train)\n","val_dataset = CustomNNDataset(x_val, y_val)\n","all_dataset = CustomNNDataset(x, y)\n","\n","# test set\n","with open(os.path.join('nn_test.pickle'), 'rb') as f:\n","  [pr_cov_test,x_test,true_input_test,y_test] = pickle.load(f)\n","x_test = torch.from_numpy(x_test).type(torch.float)\n","y_test = torch.from_numpy(y_test).type(torch.int).reshape(y_test.shape[0],)\n","test_dataset = CustomNNDataset(x_test, y_test)\n","\n","\n","if use_cuda:\n","    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, pin_memory=True,\n","                                              num_workers=3)\n","    valloader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False, pin_memory=True,\n","                                            num_workers=3)\n","\n","else:\n","    trainloader = torch.utils.data.DataLoader(train_dataset, batch_size=batch_size, shuffle=True, pin_memory=False,\n","                                              num_workers=3)\n","    valloader = torch.utils.data.DataLoader(val_dataset, batch_size=batch_size, shuffle=False, pin_memory=False,\n","                                            num_workers=3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NhtXhW3HiBv8","executionInfo":{"status":"ok","timestamp":1695699693713,"user_tz":420,"elapsed":5,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}},"outputId":"53e22f54-f44a-4e5b-efa5-83b51e03de56"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[36m\n","Data:\u001b[0m\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py:560: UserWarning: This DataLoader will create 3 worker processes in total. Our suggested max number of worker in current system is 2, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.\n","  warnings.warn(_create_warning_msg(\n"]}]},{"cell_type":"code","source":["## ---------------------------------------------------------------------------------------------------------------------\n","# net dims\n","cprint('c', '\\nNetwork:')\n","\n","lr = args.lr\n","########################################################################################\n","\n","\n","net = BNN_cat(NTrainPoints, lr=lr, cuda=use_cuda, grad_std_mul=20)\n","\n","\n","## weight saving parameters #######\n","burn_in = args.burn_in\n","sim_steps = args.sample_freq\n","N_saves=100000\n","resample_its = 50\n","resample_prior_its = 15\n","re_burn = 1e8\n","###################################\n","\n","## ---------------------------------------------------------------------------------------------------------------------\n","\n","\n","\n","# net dims\n","epoch = 0\n","it_count = 0\n","## ---------------------------------------------------------------------------------------------------------------------\n","# train\n","cprint('c', '\\nTrain:')\n","\n","print('  init cost variables:')\n","cost_train = np.zeros(nb_epochs)\n","err_train = np.zeros(nb_epochs)\n","cost_dev = np.zeros(nb_epochs)\n","err_dev = np.zeros(nb_epochs)\n","best_cost = np.inf\n","best_err = np.inf\n","test_accuracy_dev = np.zeros(nb_epochs)\n","\n","tic0 = time.time()\n","for i in range(epoch, nb_epochs):\n","    net.set_mode_train(True)\n","    tic = time.time()\n","    nb_samples = 0\n","    for x, y in trainloader:\n","\n","        if flat_ims:\n","            x = x.view(x.shape[0], -1)\n","\n","        cost_pred, err = net.fit(x, y, burn_in=(i % re_burn < burn_in),\n","                                 resample_momentum=(it_count % resample_its == 0),\n","                                 resample_prior=(it_count % resample_prior_its == 0))\n","        it_count += 1\n","        err_train[i] += err\n","        cost_train[i] += cost_pred\n","        nb_samples += len(x)\n","\n","    cost_train[i] /= nb_samples\n","    err_train[i] /= nb_samples\n","    toc = time.time()\n","\n","    # ---- print\n","    print(\"it %d/%d, Jtr_pred = %f, err = %f, \" % (i, nb_epochs, cost_train[i], err_train[i]), end=\"\")\n","    cprint('r', '   time: %f seconds\\n' % (toc - tic))\n","    net.update_lr(i)\n","\n","    # ---- save weights\n","    if i % re_burn >= burn_in and i % sim_steps == 0:\n","        net.save_sampled_net(max_samples=N_saves)\n","\n","    # ---- dev\n","    if i % nb_its_dev == 0:\n","        nb_samples = 0\n","        for j, (x, y) in enumerate(valloader):\n","            if flat_ims:\n","                x = x.view(x.shape[0], -1)\n","\n","            cost, err, probs = net.eval(x, y)\n","\n","            cost_dev[i] += cost\n","            err_dev[i] += err\n","            nb_samples += len(x)\n","\n","        cost_dev[i] /= nb_samples\n","        err_dev[i] /= nb_samples\n","\n","        cprint('g', '    Jdev = %f, err = %f\\n' % (cost_dev[i], err_dev[i]))\n","        if err_dev[i] < best_err:\n","            best_err = err_dev[i]\n","            cprint('b', 'best test error')\n","    test_accuracy = (net.predict(test_dataset.x).data.max(dim=1, keepdim=False)[1] == test_dataset.y).double().mean().numpy()\n","    test_accuracy_dev[i] = test_accuracy\n","\n","toc0 = time.time()\n","runtime_per_it = (toc0 - tic0) / float(nb_epochs)\n","runtime_total = toc0 - tic0\n","cprint('r', '   average time: %f seconds\\n' % runtime_per_it)\n","cprint('r', '   total time: %f seconds\\n' % runtime_total)\n","\n","## SAVE WEIGHTS\n","net.save_weights(models_dir + '/state_dicts.pkl')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0AlfdUpZf6Lc","executionInfo":{"status":"ok","timestamp":1695699750947,"user_tz":420,"elapsed":57238,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}},"outputId":"223c3209-dcf1-43a4-e480-50877ca9fe1e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[36m\n","Network:\u001b[0m\n","\u001b[36m\n","Net:\u001b[0m\n","\u001b[33mBNN categorical output\u001b[0m\n","    Total params: 0.00M\n","\u001b[36m\n","Train:\u001b[0m\n","  init cost variables:\n"]},{"output_type":"stream","name":"stderr","text":["/content/drive/MyDrive/Bayesian-Neural-Networks-master/src/Stochastic_Gradient_HMC_SA/optimizers.py:69: UserWarning: This overload of add_ is deprecated:\n","\tadd_(Number alpha, Tensor other)\n","Consider using one of the following signatures instead:\n","\tadd_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)\n","  d_p.add_(weight_decay, p.data)\n"]},{"output_type":"stream","name":"stdout","text":["it 0/100, Jtr_pred = 0.725793, err = 0.657500, \u001b[31m   time: 0.370825 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.708946, err = 0.570000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 1/100, Jtr_pred = 0.698561, err = 0.541250, \u001b[31m   time: 0.370327 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.678264, err = 0.440000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 2/100, Jtr_pred = 0.664484, err = 0.307500, \u001b[31m   time: 0.375548 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 1/100000\u001b[0m\n","\u001b[32m    Jdev = 0.626984, err = 0.190000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 3/100, Jtr_pred = 0.527244, err = 0.190000, \u001b[31m   time: 0.380071 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.500808, err = 0.135000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 4/100, Jtr_pred = 0.418942, err = 0.097500, \u001b[31m   time: 0.380938 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 2/100000\u001b[0m\n","\u001b[32m    Jdev = 0.381772, err = 0.070000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 5/100, Jtr_pred = 0.298230, err = 0.057500, \u001b[31m   time: 0.314954 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.384606, err = 0.100000\n","\u001b[0m\n","it 6/100, Jtr_pred = 0.248197, err = 0.056250, \u001b[31m   time: 0.302807 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 3/100000\u001b[0m\n","\u001b[32m    Jdev = 0.249048, err = 0.065000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 7/100, Jtr_pred = 0.206686, err = 0.041250, \u001b[31m   time: 0.494585 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.202633, err = 0.055000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 8/100, Jtr_pred = 0.187737, err = 0.035000, \u001b[31m   time: 0.534342 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 4/100000\u001b[0m\n","\u001b[32m    Jdev = 0.185582, err = 0.040000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 9/100, Jtr_pred = 0.167067, err = 0.036250, \u001b[31m   time: 0.372023 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.148239, err = 0.030000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 10/100, Jtr_pred = 0.155157, err = 0.035000, \u001b[31m   time: 0.329022 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 5/100000\u001b[0m\n","\u001b[32m    Jdev = 0.201401, err = 0.035000\n","\u001b[0m\n","it 11/100, Jtr_pred = 0.284641, err = 0.077500, \u001b[31m   time: 0.430442 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.207479, err = 0.055000\n","\u001b[0m\n","it 12/100, Jtr_pred = 0.157230, err = 0.035000, \u001b[31m   time: 0.185902 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 6/100000\u001b[0m\n","\u001b[32m    Jdev = 0.140431, err = 0.030000\n","\u001b[0m\n","it 13/100, Jtr_pred = 0.170493, err = 0.038750, \u001b[31m   time: 0.170411 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.146498, err = 0.045000\n","\u001b[0m\n","it 14/100, Jtr_pred = 0.139743, err = 0.033750, \u001b[31m   time: 0.197393 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 7/100000\u001b[0m\n","\u001b[32m    Jdev = 0.147931, err = 0.040000\n","\u001b[0m\n","it 15/100, Jtr_pred = 0.139934, err = 0.040000, \u001b[31m   time: 0.177751 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.147088, err = 0.045000\n","\u001b[0m\n","it 16/100, Jtr_pred = 0.148543, err = 0.038750, \u001b[31m   time: 0.270256 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 8/100000\u001b[0m\n","\u001b[32m    Jdev = 0.130872, err = 0.035000\n","\u001b[0m\n","it 17/100, Jtr_pred = 0.149547, err = 0.035000, \u001b[31m   time: 0.299912 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.233951, err = 0.055000\n","\u001b[0m\n","it 18/100, Jtr_pred = 0.200979, err = 0.045000, \u001b[31m   time: 0.278800 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 9/100000\u001b[0m\n","\u001b[32m    Jdev = 0.138364, err = 0.040000\n","\u001b[0m\n","it 19/100, Jtr_pred = 0.326618, err = 0.103750, \u001b[31m   time: 0.317146 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.181951, err = 0.070000\n","\u001b[0m\n","it 20/100, Jtr_pred = 0.182623, err = 0.056250, \u001b[31m   time: 0.294750 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 10/100000\u001b[0m\n","\u001b[32m    Jdev = 0.177527, err = 0.045000\n","\u001b[0m\n","it 21/100, Jtr_pred = 0.157903, err = 0.037500, \u001b[31m   time: 0.287212 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.154257, err = 0.045000\n","\u001b[0m\n","it 22/100, Jtr_pred = 0.139970, err = 0.033750, \u001b[31m   time: 0.297629 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 11/100000\u001b[0m\n","\u001b[32m    Jdev = 0.124100, err = 0.045000\n","\u001b[0m\n","it 23/100, Jtr_pred = 0.136180, err = 0.035000, \u001b[31m   time: 0.276395 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.125035, err = 0.045000\n","\u001b[0m\n","it 24/100, Jtr_pred = 0.137959, err = 0.032500, \u001b[31m   time: 0.304054 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 12/100000\u001b[0m\n","\u001b[32m    Jdev = 0.163021, err = 0.055000\n","\u001b[0m\n","it 25/100, Jtr_pred = 0.148273, err = 0.036250, \u001b[31m   time: 0.179693 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.143720, err = 0.045000\n","\u001b[0m\n","it 26/100, Jtr_pred = 0.137934, err = 0.035000, \u001b[31m   time: 0.191322 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 13/100000\u001b[0m\n","\u001b[32m    Jdev = 0.126086, err = 0.040000\n","\u001b[0m\n","it 27/100, Jtr_pred = 0.135636, err = 0.035000, \u001b[31m   time: 0.200954 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.117452, err = 0.040000\n","\u001b[0m\n","it 28/100, Jtr_pred = 0.140019, err = 0.036250, \u001b[31m   time: 0.181697 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 14/100000\u001b[0m\n","\u001b[32m    Jdev = 0.120526, err = 0.040000\n","\u001b[0m\n","it 29/100, Jtr_pred = 0.133564, err = 0.035000, \u001b[31m   time: 0.184952 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.116321, err = 0.030000\n","\u001b[0m\n","it 30/100, Jtr_pred = 0.138905, err = 0.036250, \u001b[31m   time: 0.199693 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 15/100000\u001b[0m\n","\u001b[32m    Jdev = 0.112967, err = 0.035000\n","\u001b[0m\n","it 31/100, Jtr_pred = 0.137866, err = 0.037500, \u001b[31m   time: 0.189944 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.135848, err = 0.050000\n","\u001b[0m\n","it 32/100, Jtr_pred = 0.143498, err = 0.033750, \u001b[31m   time: 0.180922 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 16/100000\u001b[0m\n","\u001b[32m    Jdev = 0.119678, err = 0.040000\n","\u001b[0m\n","it 33/100, Jtr_pred = 0.140592, err = 0.036250, \u001b[31m   time: 0.195506 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.136264, err = 0.045000\n","\u001b[0m\n","it 34/100, Jtr_pred = 0.138909, err = 0.035000, \u001b[31m   time: 0.192941 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 17/100000\u001b[0m\n","\u001b[32m    Jdev = 0.134373, err = 0.045000\n","\u001b[0m\n","it 35/100, Jtr_pred = 0.134266, err = 0.032500, \u001b[31m   time: 0.186812 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.116362, err = 0.040000\n","\u001b[0m\n","it 36/100, Jtr_pred = 0.137054, err = 0.035000, \u001b[31m   time: 0.194596 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 18/100000\u001b[0m\n","\u001b[32m    Jdev = 0.132456, err = 0.045000\n","\u001b[0m\n","it 37/100, Jtr_pred = 0.136192, err = 0.035000, \u001b[31m   time: 0.200808 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.139095, err = 0.030000\n","\u001b[0m\n","it 38/100, Jtr_pred = 0.140754, err = 0.035000, \u001b[31m   time: 0.187820 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 19/100000\u001b[0m\n","\u001b[32m    Jdev = 0.115322, err = 0.035000\n","\u001b[0m\n","it 39/100, Jtr_pred = 0.138074, err = 0.036250, \u001b[31m   time: 0.192892 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.143319, err = 0.050000\n","\u001b[0m\n","it 40/100, Jtr_pred = 0.143822, err = 0.037500, \u001b[31m   time: 0.443416 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 20/100000\u001b[0m\n","\u001b[32m    Jdev = 0.132661, err = 0.045000\n","\u001b[0m\n","it 41/100, Jtr_pred = 0.138647, err = 0.035000, \u001b[31m   time: 0.451613 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.131227, err = 0.045000\n","\u001b[0m\n","it 42/100, Jtr_pred = 0.140829, err = 0.037500, \u001b[31m   time: 0.467821 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 21/100000\u001b[0m\n","\u001b[32m    Jdev = 0.152437, err = 0.055000\n","\u001b[0m\n","it 43/100, Jtr_pred = 0.139867, err = 0.036250, \u001b[31m   time: 0.461175 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.122452, err = 0.040000\n","\u001b[0m\n","it 44/100, Jtr_pred = 0.137245, err = 0.036250, \u001b[31m   time: 0.447878 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 22/100000\u001b[0m\n","\u001b[32m    Jdev = 0.119845, err = 0.035000\n","\u001b[0m\n","it 45/100, Jtr_pred = 0.137328, err = 0.036250, \u001b[31m   time: 0.654511 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.142525, err = 0.050000\n","\u001b[0m\n","it 46/100, Jtr_pred = 0.140001, err = 0.037500, \u001b[31m   time: 0.458667 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 23/100000\u001b[0m\n","\u001b[32m    Jdev = 0.123108, err = 0.045000\n","\u001b[0m\n","it 47/100, Jtr_pred = 0.154843, err = 0.046250, \u001b[31m   time: 0.456326 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.148041, err = 0.040000\n","\u001b[0m\n","it 48/100, Jtr_pred = 0.162867, err = 0.041250, \u001b[31m   time: 0.457166 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 24/100000\u001b[0m\n","\u001b[32m    Jdev = 0.218960, err = 0.065000\n","\u001b[0m\n","it 49/100, Jtr_pred = 0.150572, err = 0.036250, \u001b[31m   time: 0.764622 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.142193, err = 0.050000\n","\u001b[0m\n","it 50/100, Jtr_pred = 0.137831, err = 0.035000, \u001b[31m   time: 0.766042 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 25/100000\u001b[0m\n","\u001b[32m    Jdev = 0.113754, err = 0.040000\n","\u001b[0m\n","it 51/100, Jtr_pred = 0.135585, err = 0.036250, \u001b[31m   time: 0.773103 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.131319, err = 0.045000\n","\u001b[0m\n","it 52/100, Jtr_pred = 0.138755, err = 0.035000, \u001b[31m   time: 0.763582 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 26/100000\u001b[0m\n","\u001b[32m    Jdev = 0.156031, err = 0.055000\n","\u001b[0m\n","it 53/100, Jtr_pred = 0.134784, err = 0.033750, \u001b[31m   time: 0.538958 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.118527, err = 0.040000\n","\u001b[0m\n","it 54/100, Jtr_pred = 0.135784, err = 0.037500, \u001b[31m   time: 0.464376 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 27/100000\u001b[0m\n","\u001b[32m    Jdev = 0.128667, err = 0.045000\n","\u001b[0m\n","it 55/100, Jtr_pred = 0.135725, err = 0.035000, \u001b[31m   time: 0.462694 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.122644, err = 0.040000\n","\u001b[0m\n","it 56/100, Jtr_pred = 0.144854, err = 0.037500, \u001b[31m   time: 0.454211 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 28/100000\u001b[0m\n","\u001b[32m    Jdev = 0.131549, err = 0.030000\n","\u001b[0m\n","it 57/100, Jtr_pred = 0.139717, err = 0.032500, \u001b[31m   time: 0.459161 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.125781, err = 0.040000\n","\u001b[0m\n","it 58/100, Jtr_pred = 0.138008, err = 0.035000, \u001b[31m   time: 0.479364 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 29/100000\u001b[0m\n","\u001b[32m    Jdev = 0.127397, err = 0.040000\n","\u001b[0m\n","it 59/100, Jtr_pred = 0.140325, err = 0.032500, \u001b[31m   time: 0.477540 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.159721, err = 0.055000\n","\u001b[0m\n","it 60/100, Jtr_pred = 0.140694, err = 0.036250, \u001b[31m   time: 0.457306 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 30/100000\u001b[0m\n","\u001b[32m    Jdev = 0.123437, err = 0.040000\n","\u001b[0m\n","it 61/100, Jtr_pred = 0.140214, err = 0.035000, \u001b[31m   time: 0.466309 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.130913, err = 0.040000\n","\u001b[0m\n","it 62/100, Jtr_pred = 0.134730, err = 0.035000, \u001b[31m   time: 0.455398 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 31/100000\u001b[0m\n","\u001b[32m    Jdev = 0.123302, err = 0.040000\n","\u001b[0m\n","it 63/100, Jtr_pred = 0.140819, err = 0.035000, \u001b[31m   time: 0.451313 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.158949, err = 0.055000\n","\u001b[0m\n","it 64/100, Jtr_pred = 0.138878, err = 0.036250, \u001b[31m   time: 0.468592 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 32/100000\u001b[0m\n","\u001b[32m    Jdev = 0.113854, err = 0.040000\n","\u001b[0m\n","it 65/100, Jtr_pred = 0.134851, err = 0.035000, \u001b[31m   time: 0.632548 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.110906, err = 0.030000\n","\u001b[0m\n","it 66/100, Jtr_pred = 0.146912, err = 0.038750, \u001b[31m   time: 0.459957 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 33/100000\u001b[0m\n","\u001b[32m    Jdev = 0.133754, err = 0.045000\n","\u001b[0m\n","it 67/100, Jtr_pred = 0.147242, err = 0.033750, \u001b[31m   time: 0.451685 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.195588, err = 0.065000\n","\u001b[0m\n","it 68/100, Jtr_pred = 0.139270, err = 0.035000, \u001b[31m   time: 0.449999 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 34/100000\u001b[0m\n","\u001b[32m    Jdev = 0.106240, err = 0.040000\n","\u001b[0m\n","it 69/100, Jtr_pred = 0.140353, err = 0.036250, \u001b[31m   time: 0.464672 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.165385, err = 0.055000\n","\u001b[0m\n","it 70/100, Jtr_pred = 0.142344, err = 0.035000, \u001b[31m   time: 0.617650 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 35/100000\u001b[0m\n","\u001b[32m    Jdev = 0.136414, err = 0.045000\n","\u001b[0m\n","it 71/100, Jtr_pred = 0.140929, err = 0.035000, \u001b[31m   time: 0.785067 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.122850, err = 0.045000\n","\u001b[0m\n","it 72/100, Jtr_pred = 0.138922, err = 0.035000, \u001b[31m   time: 0.768253 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 36/100000\u001b[0m\n","\u001b[32m    Jdev = 0.123775, err = 0.040000\n","\u001b[0m\n","it 73/100, Jtr_pred = 0.147055, err = 0.036250, \u001b[31m   time: 0.754893 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.147964, err = 0.050000\n","\u001b[0m\n","it 74/100, Jtr_pred = 0.139031, err = 0.035000, \u001b[31m   time: 0.669387 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 37/100000\u001b[0m\n","\u001b[32m    Jdev = 0.133203, err = 0.045000\n","\u001b[0m\n","it 75/100, Jtr_pred = 0.135164, err = 0.035000, \u001b[31m   time: 0.480194 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.122736, err = 0.040000\n","\u001b[0m\n","it 76/100, Jtr_pred = 0.134432, err = 0.036250, \u001b[31m   time: 0.451973 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 38/100000\u001b[0m\n","\u001b[32m    Jdev = 0.120859, err = 0.040000\n","\u001b[0m\n","it 77/100, Jtr_pred = 0.157383, err = 0.036250, \u001b[31m   time: 0.448215 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.203706, err = 0.060000\n","\u001b[0m\n","it 78/100, Jtr_pred = 0.150855, err = 0.035000, \u001b[31m   time: 0.454924 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 39/100000\u001b[0m\n","\u001b[32m    Jdev = 0.123104, err = 0.040000\n","\u001b[0m\n","it 79/100, Jtr_pred = 0.175721, err = 0.047500, \u001b[31m   time: 0.462846 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.150732, err = 0.030000\n","\u001b[0m\n","it 80/100, Jtr_pred = 0.156443, err = 0.037500, \u001b[31m   time: 0.460933 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 40/100000\u001b[0m\n","\u001b[32m    Jdev = 0.136277, err = 0.040000\n","\u001b[0m\n","it 81/100, Jtr_pred = 0.155400, err = 0.038750, \u001b[31m   time: 0.487303 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.194518, err = 0.055000\n","\u001b[0m\n","it 82/100, Jtr_pred = 0.141608, err = 0.036250, \u001b[31m   time: 0.486321 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 41/100000\u001b[0m\n","\u001b[32m    Jdev = 0.120737, err = 0.040000\n","\u001b[0m\n","it 83/100, Jtr_pred = 0.142140, err = 0.036250, \u001b[31m   time: 0.449612 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.125919, err = 0.045000\n","\u001b[0m\n","it 84/100, Jtr_pred = 0.143648, err = 0.041250, \u001b[31m   time: 0.471349 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 42/100000\u001b[0m\n","\u001b[32m    Jdev = 0.151784, err = 0.065000\n","\u001b[0m\n","it 85/100, Jtr_pred = 0.134423, err = 0.035000, \u001b[31m   time: 0.650308 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.131760, err = 0.045000\n","\u001b[0m\n","it 86/100, Jtr_pred = 0.136415, err = 0.035000, \u001b[31m   time: 0.453646 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 43/100000\u001b[0m\n","\u001b[32m    Jdev = 0.125291, err = 0.040000\n","\u001b[0m\n","it 87/100, Jtr_pred = 0.138525, err = 0.035000, \u001b[31m   time: 0.466580 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.122167, err = 0.025000\n","\u001b[0m\n","\u001b[34mbest test error\u001b[0m\n","it 88/100, Jtr_pred = 0.146412, err = 0.036250, \u001b[31m   time: 0.465797 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 44/100000\u001b[0m\n","\u001b[32m    Jdev = 0.138062, err = 0.040000\n","\u001b[0m\n","it 89/100, Jtr_pred = 0.135093, err = 0.033750, \u001b[31m   time: 0.467863 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.157559, err = 0.055000\n","\u001b[0m\n","it 90/100, Jtr_pred = 0.139439, err = 0.033750, \u001b[31m   time: 0.463033 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 45/100000\u001b[0m\n","\u001b[32m    Jdev = 0.175913, err = 0.055000\n","\u001b[0m\n","it 91/100, Jtr_pred = 0.144648, err = 0.033750, \u001b[31m   time: 0.602954 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.132105, err = 0.040000\n","\u001b[0m\n","it 92/100, Jtr_pred = 0.136376, err = 0.033750, \u001b[31m   time: 0.750405 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 46/100000\u001b[0m\n","\u001b[32m    Jdev = 0.138636, err = 0.045000\n","\u001b[0m\n","it 93/100, Jtr_pred = 0.140002, err = 0.035000, \u001b[31m   time: 0.782173 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.133276, err = 0.040000\n","\u001b[0m\n","it 94/100, Jtr_pred = 0.141917, err = 0.035000, \u001b[31m   time: 0.771284 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 47/100000\u001b[0m\n","\u001b[32m    Jdev = 0.147547, err = 0.050000\n","\u001b[0m\n","it 95/100, Jtr_pred = 0.136073, err = 0.033750, \u001b[31m   time: 0.740670 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.129570, err = 0.045000\n","\u001b[0m\n","it 96/100, Jtr_pred = 0.136905, err = 0.035000, \u001b[31m   time: 0.463407 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 48/100000\u001b[0m\n","\u001b[32m    Jdev = 0.147563, err = 0.045000\n","\u001b[0m\n","it 97/100, Jtr_pred = 0.131937, err = 0.033750, \u001b[31m   time: 0.455510 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.125005, err = 0.040000\n","\u001b[0m\n","it 98/100, Jtr_pred = 0.134315, err = 0.033750, \u001b[31m   time: 0.467911 seconds\n","\u001b[0m\n","\u001b[36m saving weight samples 49/100000\u001b[0m\n","\u001b[32m    Jdev = 0.137361, err = 0.045000\n","\u001b[0m\n","it 99/100, Jtr_pred = 0.134483, err = 0.032500, \u001b[31m   time: 0.457601 seconds\n","\u001b[0m\n","\u001b[32m    Jdev = 0.162143, err = 0.055000\n","\u001b[0m\n","\u001b[31m   average time: 0.570864 seconds\n","\u001b[0m\n","\u001b[31m   total time: 57.086440 seconds\n","\u001b[0m\n"]}]},{"cell_type":"code","source":["test_accuracy_dev"],"metadata":{"id":"is0ffhY3gWzK","executionInfo":{"status":"ok","timestamp":1695699750947,"user_tz":420,"elapsed":7,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a951f943-bd0e-4757-d410-e26351edae0a"},"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.435, 0.572, 0.834, 0.873, 0.932, 0.906, 0.928, 0.945, 0.959,\n","       0.961, 0.961, 0.941, 0.961, 0.957, 0.955, 0.952, 0.954, 0.94 ,\n","       0.958, 0.928, 0.947, 0.946, 0.953, 0.955, 0.941, 0.949, 0.955,\n","       0.955, 0.957, 0.959, 0.959, 0.948, 0.954, 0.947, 0.95 , 0.956,\n","       0.949, 0.961, 0.958, 0.948, 0.948, 0.955, 0.943, 0.951, 0.959,\n","       0.948, 0.957, 0.956, 0.93 , 0.947, 0.957, 0.954, 0.947, 0.959,\n","       0.955, 0.955, 0.963, 0.956, 0.953, 0.944, 0.957, 0.95 , 0.955,\n","       0.941, 0.957, 0.962, 0.954, 0.938, 0.959, 0.935, 0.948, 0.955,\n","       0.961, 0.947, 0.955, 0.958, 0.96 , 0.941, 0.957, 0.958, 0.956,\n","       0.943, 0.956, 0.956, 0.948, 0.954, 0.956, 0.961, 0.961, 0.942,\n","       0.944, 0.955, 0.95 , 0.957, 0.947, 0.955, 0.947, 0.957, 0.953,\n","       0.944])"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":[],"metadata":{"id":"Pdqqe5XnlQK5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Pa7q4Vo5lQMs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"hTGvhUE9lQPA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"UR8oISnRlQRG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"yxLN4vY0lQTM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["with open(os.path.join('data.pickle'), 'rb') as f:\n","  [nz_var,pr_cov,x,true_input,y] = pickle.load(f)\n","\n","def true_forward(u, x):\n","  return 1 / (1 + np.exp(\n","      -np.dot(np.dot(np.dot(x, u[:15].reshape((3, 5))) + u[45:50], u[15:40].reshape((5, 5))) + u[50:55], u[40:45].reshape((5, 1))) - u[55:]\n","      ))\n","\n","fwdout = true_forward(true_input, x)\n","\n","epsilon=1e-8\n","np.sum(y * np.log(fwdout+epsilon) + (1 - y) * np.log(1 - fwdout+epsilon))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"71UqwwrvlQVy","executionInfo":{"status":"ok","timestamp":1695012124049,"user_tz":420,"elapsed":156,"user":{"displayName":"Yang Meng","userId":"04956942467409089725"}},"outputId":"eba117d9-6481-4434-80be-9861d74d02ce"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["-165.12137255394214"]},"metadata":{},"execution_count":35}]},{"cell_type":"code","source":[],"metadata":{"id":"zuOOJ7IDl4Yv"},"execution_count":null,"outputs":[]}]}